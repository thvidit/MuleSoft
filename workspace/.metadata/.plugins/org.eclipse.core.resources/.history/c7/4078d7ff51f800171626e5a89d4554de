<?xml version="1.0" encoding="UTF-8"?>

<mule xmlns:db="http://www.mulesoft.org/schema/mule/db"
	xmlns:http="http://www.mulesoft.org/schema/mule/http"
	xmlns="http://www.mulesoft.org/schema/mule/core" xmlns:doc="http://www.mulesoft.org/schema/mule/documentation"
	xmlns:spring="http://www.springframework.org/schema/beans" 
	xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
	xsi:schemaLocation="http://www.mulesoft.org/schema/mule/db http://www.mulesoft.org/schema/mule/db/current/mule-db.xsd
http://www.mulesoft.org/schema/mule/http http://www.mulesoft.org/schema/mule/http/current/mule-http.xsd
http://www.springframework.org/schema/beans http://www.springframework.org/schema/beans/spring-beans-current.xsd
http://www.mulesoft.org/schema/mule/core http://www.mulesoft.org/schema/mule/core/current/mule.xsd">
    <flow name="LoginFlow">
        <http:listener config-ref="HTTP_Listener_Configuration" path="/login" doc:name="HTTP"/>
        <set-variable variableName="user" value="#[message.inboundProperties.'http.query.params'.user == empty ? 'null' : message.inboundProperties.'http.query.params'.user]" doc:name="Check username"/>
        <set-variable variableName="password" value="#[message.inboundProperties.'http.query.params'.password]" doc:name="Set password"/>
        <db:select config-ref="MySQL_Configuration" doc:name="Database">
            <db:parameterized-query><![CDATA[SELECT *
FROM users
WHERE user_name = #[flowVars.user]]]></db:parameterized-query>
        </db:select>
        <logger message="Payload from database is:#[payload.size()], user: #[flowVars.user], password : #[flowVars.password]" level="INFO" doc:name="Logger"/>
        <choice doc:name="Choice">
            <when expression="#[payload.size() != 0]">
                <flow-ref name="CheckPassword" doc:name="CheckPassword"/>
            </when>
            <otherwise>
                <set-payload value="{  &quot;message&quot;: &quot;Invalid Username!&quot; }" mimeType="application/json" doc:name="Set Payload"/>
                <logger level="INFO" doc:name="Logger"/>
            </otherwise>
        </choice>
    </flow>
    <flow name="SignupFlow">
        <http:listener config-ref="" path="/signup" allowedMethods="POST" doc:name="HTTP"/>
        <component class="com.mule.encrypt.EncryptData" doc:name="Encrypt Password"/>
        <logger message="#[payload]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="encryptPass" value="#[payload]" doc:name="Encrypted String"/>
        <db:insert config-ref="MySQL_Configuration" doc:name="Store in Database">
            <db:parameterized-query><![CDATA[INSERT INTO users
VALUES(#[message.inboundProperties.'http.query.params'.user], #[flowVars.encryptPass],#[message.inboundProperties.'http.query.params'.email])]]></db:parameterized-query>
        </db:insert>
        <set-payload value="{
 	&quot;message&quot;: &quot;SignUp Successful!&quot;
}" mimeType="application/json" doc:name="Set Payload"/>
    </flow>
    <sub-flow name="CheckPassword">
        <db:select config-ref="" doc:name="Database">
            <db:parameterized-query><![CDATA[SELECT *  FROM loginDetails
WHERE username = #[flowVars.user]]]></db:parameterized-query>
        </db:select>
        <logger message="Password from database: #[payload.userpass]" level="INFO" doc:name="Logger"/>
        <set-variable variableName="passdb" value="#[payload.get(0).userpass]" doc:name="Decide to login"/>
        <component doc:name="Get hashed value of password" class="com.mule.encrypt.EncryptData"/>
        <set-variable variableName="encryptedPass" value="#[payload]" doc:name="Variable"/>
        <choice doc:name="Choice">
            <when expression="#[flowVars.encryptedPass == flowVars.passdb]">
                <set-payload value="{
	&quot;message&quot;: &quot;Login Successful!&quot;
}" mimeType="application/json" doc:name="Set Payload"/>
            </when>
            <otherwise>
                <set-payload value="{
	&quot;message&quot;: &quot;Invalid Password!&quot;
}" doc:name="Set Payload" mimeType="application/json"/>
            </otherwise>
        </choice>
    </sub-flow>

</mule>
