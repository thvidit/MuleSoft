package com.orchard.ws.logic;

import java.sql.Connection;
import java.sql.ResultSet;

import org.mule.DefaultMuleEvent;
import org.mule.DefaultMuleMessage;
import org.mule.MessageExchangePattern;
import org.mule.api.MuleContext;
import org.mule.api.MuleEvent;
import org.mule.api.MuleEventContext;
import org.mule.api.MuleMessage;
import org.mule.api.lifecycle.Callable;
import org.mule.api.transport.PropertyScope;
import org.mule.construct.Flow;

public class Logic implements Callable{

	Database db = new Database();
	String result = "false";
	@Override
	public Object onCall(MuleEventContext eventContext) throws Exception {
		MuleMessage message = eventContext.getMessage();
		System.out.println("Message is " + message);
		String leadId = (String) message.getProperty("name");
		String two = message.getPayloadAsString();
		System.out.println("lead id is: " + two);
		//leadId = message.get
		Connection conn = db.getConnection();
		System.out.println("Obtained lead id is: " + leadId);
		ResultSet rs = conn.createStatement().executeQuery("Select * from Leads");
		while(rs.next()){
			System.out.println("Leads id is: " + rs.getString("leadsId"));
			if(rs.getString("leadsId") == leadId){
				System.out.println("Leads id is: " + rs.getString("leadsId"));
				result = "true";
			}
		}
		MuleMessage output = new DefaultMuleMessage(message.getOriginalPayload(),eventContext.getMuleContext());
		output.setEncoding("UTF-8");
		output.setPayload(message.getOriginalPayload());
		
		if(result.equals("true"))
			invokeMuleFlow(output,eventContext.getMuleContext(),"checked-flow");
		else
			invokeMuleFlow(output,eventContext.getMuleContext(),"unchecked-flow");
		return result;
	}
	
	 public static MuleEvent invokeMuleFlow(MuleMessage muleMessage, MuleContext muleContext,
			  String flowName) throws Exception {
			  Flow flow = (Flow) muleContext.getRegistry().lookupFlowConstruct(flowName);
			  MuleEvent muleEvent = new DefaultMuleEvent(muleMessage,
			   MessageExchangePattern.REQUEST_RESPONSE, flow);
			  return flow.process(muleEvent);
			 }

}
